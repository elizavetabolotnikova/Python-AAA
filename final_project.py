import click
import time
from functools import wraps


class Pizza:
    def __init__(self, name, ingredients, size='L'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç Pizza.

              –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
              name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã.
              ingredients (list): –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–∏—Ü—Ü—ã.
              size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'L').
              """

        self.name = name
        self.ingredients = ingredients
        self.size = size

    def dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ü—Ü–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
        return {
            'name': self.name,
            'ingredients': self.ingredients,
            'size': self.size
        }


class Margherita(Pizza):
    def __init__(self, size):
        name = 'MargheritaüçÖ'
        ingredients = ['tomato sauce', 'mozzarella', 'tomatoes']
        size = size
        super().__init__(name, ingredients, size)


class Pepperoni(Pizza):
    def __init__(self, size):
        name = 'Pepperoniüçï'
        ingredients = ['tomato sauce', 'mozzarella', 'pepperoni']
        size = size
        super().__init__(name, ingredients, size)


class Hawaiian(Pizza):
    def __init__(self, size):
        name = 'Hawaiianüå¥'
        ingredients = ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']
        size = size
        super().__init__(name, ingredients, size)


def log_time(template=''):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∏–∑–º–µ—Ä—è—é—â–∏–π –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            result = func(*args, **kwargs)
            execution_time = round(time.time() - start_time, 2)
            function_name = func.__name__
            if template:
                message = template.format(execution_time)
            else:
                message = f'{function_name} - {execution_time}—Å!'
            print(message)
            return result

        return wrapper

    return decorator


@click.group()
def cli():
    """Command-line –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã."""
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.option('--size', default='L', type=click.Choice(['L', 'XL']))
@click.argument('pizza_type', nargs=1)
def order(pizza_type, delivery, size):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    pizza_type = pizza_type.lower()
    if pizza_type == 'margherita':
        pizza = Margherita(size=size)
    elif pizza_type == 'pepperoni':
        pizza = Pepperoni(size=size)
    elif pizza_type == 'hawaiian':
        pizza = Hawaiian(size=size)
    else:
        click.echo('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –ø–∏—Ü—Ü—ã —É –Ω–∞—Å –Ω–µ—Ç.')
        return
    preparation_time = 2 if pizza.size == 'L' else 4
    delivery_time = 1
    click.echo(f'üë©‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {preparation_time}—Å!')
    if delivery:
        click.echo(f'üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {delivery_time}—Å!')


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    margherita = Margherita('L/XL')
    pepperoni = Pepperoni('L/XL')
    hawaiian = Hawaiian('L/XL')
    click.echo('–ú–µ–Ω—é:\n')
    for pizza in [margherita, pepperoni, hawaiian]:
        click.echo(f'{pizza.name}:')
        click.echo(f'–†–∞–∑–º–µ—Ä—ã - {pizza.size}')
        for ingredient in pizza.ingredients:
            click.echo(f'- {ingredient}')


@log_time()
def bake(pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    time.sleep(2)
    return f'{bake.__name__} - –≥–æ—Ç–æ–≤–æ'


@log_time('–î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def delivery(pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    time.sleep(1)
    return f'{delivery.__name__} - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'


@log_time('–ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    time.sleep(1)
    return f'{pickup.__name__} - –∑–∞–±—Ä–∞–Ω–æ'


# –¢–µ—Å—Ç—ã
def test_bake_margherita_xl():
    assert bake(Margherita('XL')) == 'bake - –≥–æ—Ç–æ–≤–æ'


def test_delivery_pepperoni_l():
    assert delivery(Pepperoni('L')) == 'delivery - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'


def test_pickup_hawaiian_xl():
    assert pickup(Hawaiian('XL')) == 'pickup - –∑–∞–±—Ä–∞–Ω–æ'


if __name__ == '__main__':
    cli()
